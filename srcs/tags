!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
add_tok_last	tokenizer.c	/^void add_tok_last(t_token **tok_list, t_tok_type tok_type, int length)$/;"	f	typeref:typename:void
detect_tokens	tokenizer.c	/^void detect_tokens(t_token **tok_list, char *str)$/;"	f	typeref:typename:void
ft_cd	ft_cd.c	/^int	ft_cd(t_info *info, char *dir)$/;"	f	typeref:typename:int
ft_cmd_line	main.c	/^char	*ft_cmd_line(char *str)$/;"	f	typeref:typename:char *
ft_cmdnew	main.c	/^t_cmd	*ft_cmdnew(char *cmd, t_tree *ptr)$/;"	f	typeref:typename:t_cmd *
ft_create_token	tokenizer.c	/^t_token *ft_create_token(t_tok_type tok_type)$/;"	f	typeref:typename:t_token *
ft_do_it	main.c	/^void	ft_do_it(t_info *info)$/;"	f	typeref:typename:void
ft_envadd_back	main.c	/^void	ft_envadd_back(t_env **alst, t_env *new)$/;"	f	typeref:typename:void
ft_envnew	main.c	/^t_env	*ft_envnew(char *line)$/;"	f	typeref:typename:t_env *
ft_exit	main.c	/^int	ft_exit(char *str)$/;"	f	typeref:typename:int
ft_fill_envnew	main.c	/^int	ft_fill_envnew(t_env *env, char *line)$/;"	f	typeref:typename:int
ft_fill_tree	main.c	/^t_tree	*ft_fill_tree(t_info *info)$/;"	f	typeref:typename:t_tree *
ft_free_all	main.c	/^void	ft_free_all(t_info *info)$/;"	f	typeref:typename:void
ft_free_branch	main.c	/^void	ft_free_branch(t_tree *branch)$/;"	f	typeref:typename:void
ft_free_env	main.c	/^void	ft_free_env(t_env *env)$/;"	f	typeref:typename:void
ft_free_tree	main.c	/^void	ft_free_tree(t_tree *tree)$/;"	f	typeref:typename:void
ft_get_env_value	main.c	/^char	*ft_get_env_value(t_info *info, char *name)$/;"	f	typeref:typename:char *
ft_init_env	main.c	/^int	ft_init_env(t_info *info, char **envp)$/;"	f	typeref:typename:int
ft_init_info	main.c	/^int	ft_init_info(t_info *info, t_token *token)$/;"	f	typeref:typename:int
ft_init_tree	main.c	/^int	ft_init_tree(t_info *info, t_token *token)$/;"	f	typeref:typename:int
ft_keep_history	main.c	/^int	ft_keep_history(char *str)$/;"	f	typeref:typename:int
ft_lstadd_tree	main.c	/^void	ft_lstadd_tree(t_tree **alst, t_tree *new, int i)$/;"	f	typeref:typename:void
ft_nb_andor	main.c	/^int	ft_nb_andor(char *str)$/;"	f	typeref:typename:int
ft_onecmd	main.c	/^char	*ft_onecmd(t_info *info, int i)$/;"	f	typeref:typename:char *
ft_perror	ft_tools.c	/^int	ft_perror(char *error, char *str)$/;"	f	typeref:typename:int
ft_print_cmd	main.c	/^void	ft_print_cmd(t_cmd	*cmd)$/;"	f	typeref:typename:void
ft_print_env	main.c	/^void	ft_print_env(t_env *env)$/;"	f	typeref:typename:void
ft_print_test	main.c	/^void	ft_print_test(t_tree *tree, int i)$/;"	f	typeref:typename:void
ft_print_tree	main.c	/^void	ft_print_tree(t_tree *tree, int i)$/;"	f	typeref:typename:void
ft_putstr_error	ft_tools.c	/^int	ft_putstr_error(char *error)$/;"	f	typeref:typename:int
ft_pwd	ft_pwd.c	/^int	ft_pwd(void)$/;"	f	typeref:typename:int
ft_rdline_word	main.c	/^char	*ft_rdline_word(t_info *info)$/;"	f	typeref:typename:char *
ft_signal	main.c	/^void	ft_signal(int sig)$/;"	f	typeref:typename:void
ft_treenew	main.c	/^t_tree	*ft_treenew(char *str, t_tree *ptr)$/;"	f	typeref:typename:t_tree *
get_real_tok_type	tokenizer.c	/^unsigned int get_real_tok_type(char c, t_token **tok_list)$/;"	f	typeref:typename:unsigned int
init_tok_struct	tokenizer.c	/^void init_tok_struct(t_token **tok_list, int rank_in_list, int length)$/;"	f	typeref:typename:void
is_quoted	tokenizer.c	/^int is_quoted(t_token **tok_list, int rank_in_list)$/;"	f	typeref:typename:int
len_ll_list	tokenizer.c	/^int len_ll_list(t_token *tok_list)$/;"	f	typeref:typename:int
main	main.c	/^int	main(int ac, char **av, char **envp)$/;"	f	typeref:typename:int
